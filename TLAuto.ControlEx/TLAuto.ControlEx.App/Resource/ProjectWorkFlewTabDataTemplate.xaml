<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:command="http://www.galasoft.ch/mvvmlight"
                    xmlns:converter="clr-namespace:TLAuto.ControlEx.App.Converter"
                    xmlns:models="clr-namespace:TLAuto.ControlEx.App.Models"
                    xmlns:mvvm="clr-namespace:TLAuto.BaseEx.Mvvm;assembly=TLAuto.BaseEx"
                    xmlns:workFlew="clr-namespace:TLAuto.ControlEx.App.Models.WorkFlew">
    <converter:CIDToDescriptionConverter x:Key="CIDToDescriptionConvert" />

    <DataTemplate x:Key="WorkFlewGroupDataTemplate" DataType="models:WorkFlewGroupXmlInfo">
        <Expander Margin="5" Header="{Binding}" IsExpanded="{Binding IsExpanded, Mode=TwoWay}">
            <Expander.HeaderTemplate>
                <DataTemplate DataType="models:WorkFlewGroupXmlInfo">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock x:Name="TxtTitle" Text="运行流程定制" VerticalAlignment="Center" Style="{DynamicResource TitleStyle}" />
                        <Button Content="+" Width="18" Height="18" Margin="10,0,0,0" Command="{Binding AddWorkFlewCommand}" />
                        <Button Content="+↓" Width="18" Height="18" Margin="10,0,0,0" Command="{Binding InsertWorkFlewCommand}" />
                        <Button Content="顺序执行" Width="120" Height="18" Margin="10,0,0,0" IsEnabled="{Binding IsStartEnabled}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Click">
                                    <command:EventToCommand Command="{Binding StartandContinueWorkFlewCommand}" PassEventArgsToCommand="True" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Button>
                        <Button Content="单步执行" Width="120" Height="18" Margin="10,0,0,0" IsEnabled="{Binding IsStartEnabled}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Click">
                                    <command:EventToCommand Command="{Binding StartWorkFlewCommand}" PassEventArgsToCommand="True" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Button>
                        <Button Margin="10,0,0,0" Width="80" Height="18" Content="开始计时" Command="{Binding StartTimeClickCommand}" />
                        <TextBox Margin="10,0,0,0" Width="200" Height="30" FontSize="20" IsReadOnly="True" Text="{Binding StartTimeText}" />
                        <TextBlock Margin="5,0,0,0" Text="时长（分钟）：" />
                        <TextBox Width="50" Margin="5,0,0,0" Height="30" FontSize="20" IsReadOnly="True" Text="{Binding StartTimeDurationText}" />
                        <ToggleButton x:Name="TglPause" Margin="10,0,0,0" Width="80" Height="18" Content="暂停计时">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Checked">
                                    <command:EventToCommand Command="{Binding CheckedPauseCommand}" />
                                </i:EventTrigger>
                                <i:EventTrigger EventName="Unchecked">
                                    <command:EventToCommand Command="{Binding UncheckedPauseCommand}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </ToggleButton>
                        <Button Margin="10,0,0,0" Width="80" Height="18" Content="停止计时" Command="{Binding StopTimeClickCommand}" />
                    </StackPanel>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding WorkFlewGroupType}" Value="Restore">
                            <Setter TargetName="TxtTitle" Property="Text" Value="恢复流程定制" />
                        </DataTrigger>
                        <Trigger SourceName="TglPause" Property="IsChecked" Value="true">
                            <Setter TargetName="TglPause" Property="Content" Value="继续计时" />
                        </Trigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Expander.HeaderTemplate>
            <i:Interaction.Triggers>
                <mvvm:RoutedEventTrigger RoutedEvent="workFlew:WorkFlewInfo.WorkFlewStop">
                    <command:EventToCommand Command="{Binding WorkFlewStopCommand}" PassEventArgsToCommand="True" />
                </mvvm:RoutedEventTrigger>
            </i:Interaction.Triggers>
            <TreeView x:Name="Tv" ItemsSource="{Binding WorkFlews}" Height="500">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="SelectedItemChanged">
                        <command:EventToCommand Command="{Binding SelectedItemChangedCommand}" PassEventArgsToCommand="True" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <TreeView.ItemsPanel>
                    <ItemsPanelTemplate>
                        <UniformGrid Rows="1" Columns="{Binding WorkFlews.Count}" />
                    </ItemsPanelTemplate>
                </TreeView.ItemsPanel>
                <TreeView.ItemContainerStyle>
                    <Style TargetType="TreeViewItem">
                        <Setter Property="ItemsPanel">
                            <Setter.Value>
                                <ItemsPanelTemplate>
                                    <UniformGrid Rows="1" Columns="{Binding WorkFlews.Count}" />
                                </ItemsPanelTemplate>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="IsExpanded" Value="True" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition />
                                        </Grid.RowDefinitions>
                                        <ToggleButton x:Name="Expander" Visibility="Collapsed" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" />
                                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                                                Grid.Row="0" Grid.Column="1" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                            <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                        </Border>
                                        <ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1" />
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsExpanded" Value="false">
                                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed" />
                                        </Trigger>
                                        <Trigger Property="IsSelected" Value="true">
                                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                                        </Trigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsSelected" Value="true" />
                                                <Condition Property="IsSelectionActive" Value="false" />
                                            </MultiTrigger.Conditions>
                                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}" />
                                        </MultiTrigger>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </TreeView.ItemContainerStyle>
                <TreeView.ItemTemplate>
                    <HierarchicalDataTemplate ItemsSource="{Binding WorkFlews}">
                        <Border x:Name="Bd" Margin="5" BorderBrush="Green" BorderThickness="2" Width="200" Height="70">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="auto" />
                                    <RowDefinition Height="auto" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="2,2,0,0">
                                    <Button Content="+" Width="18" Height="18" Margin="2,0,0,0" VerticalAlignment="Center" Command="{Binding AddWorkFlewCommand}" />
                                    <Button Content="+↓" Width="18" Height="18" Margin="2,0,0,0" VerticalAlignment="Center" Command="{Binding InsertWorkFlewCommand}" />
                                    <Button Content="-" Width="18" Height="18" Margin="2,0,0,0" VerticalAlignment="Center" Command="{Binding RemoveWorkFlewCommand}" />
                                </StackPanel>
                                <Button x:Name="BtnFreeze" Content="禁用" Width="70" Grid.Row="0" Grid.Column="1" HorizontalAlignment="Right" VerticalAlignment="Top" Command="{Binding FreezeCommand}" />
                                <StackPanel Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="2,2,0,0">
                                    <Button x:Name="BtnRetry" Content="重试" Width="70" Height="18" Margin="2,0,0,0" VerticalAlignment="Center" Visibility="Collapsed">
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="Click">
                                                <command:EventToCommand Command="{Binding RetryWorkFlewCommand}" PassEventArgsToCommand="True" />
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </Button>
                                    <Button x:Name="BtnBreak" Content="跳过" Width="70" Margin="2,0,0,0" VerticalAlignment="Center" Visibility="Collapsed" IsEnabled="{Binding IsEnabledBreakStop}" Command="{Binding BreakCommand}" />
                                    <Button x:Name="BtnStop" Visibility="Collapsed" Content="停止" Width="70" Margin="2,0,0,0" VerticalAlignment="Center" IsEnabled="{Binding IsEnabledBreakStop}">
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="Click">
                                                <command:EventToCommand Command="{Binding StopCommand}" PassEventArgsToCommand="True" />
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </Button>
                                </StackPanel>
                                <TextBlock x:Name="TxtTitle" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="2" VerticalAlignment="Center" Text="{Binding CID, Converter={StaticResource CIDToDescriptionConvert}}"
                                           TextTrimming="CharacterEllipsis" ToolTip="{Binding Text, ElementName=TxtTitle}" Margin="2,2,0,0" />
                            </Grid>
                        </Border>
                        <HierarchicalDataTemplate.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsStart}" Value="False" />
                                    <Condition Binding="{Binding IsWarning}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="BtnStop" Property="Visibility" Value="Visible" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsStart}" Value="True" />
                                    <Condition Binding="{Binding IsWarning}" Value="False" />
                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="BtnStop" Property="Visibility" Value="Visible" />
                            </MultiDataTrigger>
                            <DataTrigger Binding="{Binding IsStart}" Value="True">
                                <Setter TargetName="Bd" Property="BorderBrush" Value="Red" />
                                <Setter TargetName="BtnBreak" Property="Visibility" Value="Visible" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsWarning}" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="Red" />
                                <Setter TargetName="BtnRetry" Property="Visibility" Value="Visible" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsFreeze}" Value="True">
                                <Setter TargetName="BtnFreeze" Property="Content" Value="恢复" />
                                <Setter TargetName="Bd" Property="Background" Value="Yellow" />
                            </DataTrigger>
                        </HierarchicalDataTemplate.Triggers>
                    </HierarchicalDataTemplate>
                </TreeView.ItemTemplate>
            </TreeView>
        </Expander>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding WorkFlews.Count}" Value="0">
                <Setter TargetName="Tv" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
</ResourceDictionary>